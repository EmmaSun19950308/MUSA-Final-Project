


## IV. Model Building and Prediction

Ordinal Regression (also known as Ordinal Logistic Regression) is another extension of binomial logistics regression. Ordinal regression is used to predict the dependent variable with ‘ordered’ multiple categories and independent variables. In other words, it is used to facilitate the interaction of dependent variables (having multiple ordered levels) with one or more independent variables.

For building this model, we will be using the polr command to estimate an ordered logistic regression. Then, we’ll specify Hess=TRUE to let the model output show the observed information matrix from optimization which is used to get standard errors.



```{r model, echo=TRUE, message=FALSE, warning=FALSE,results ='asis'}
data_f_reg <- data_f %>% 
  mutate(hour = hour(interval60),
         min = hour(interval15)) %>%
  dplyr::select(-name,-date,-time,-connection,-from.X,-from.Y,-to.X,-to.Y,-datetime,-X,-lat,-lng,-date_time,-interval60,-interval15) %>% 
  filter(country.code == 'be') %>% 
  st_drop_geometry() %>%
  na.omit()

set.seed(3456)
trainIndex <- createDataPartition(data_f_reg$occupancy, p = .65,
                                  list = FALSE,
                                  times = 1)
data_f_regTrain <- data_f_reg[ trainIndex,]
data_f_regTest  <- data_f_reg[-trainIndex,]



m0 <- polr(as.factor(occupancy) ~ avg_stop_times + facility_sum + temperature + humidity + windspeed + visibility + F_H_com + F_M_com + F_L_com + T_H_com + T_M_com + T_L_com + connections + week + day + hour + min + vehicle_type ,
          data = data_f_regTrain, Hess=TRUE)

summary(m0)

m1 <- polr(as.factor(occupancy) ~ avg_stop_times + facility_sum + temperature + humidity + windspeed + visibility + F_H_com + F_M_com + F_L_com + T_H_com + T_M_com + T_L_com + connections + week + day + hour + min + vehicle_type +
             lagHour + lag2Hours + lag3Hours + lag4Hours + lag12Hours
           , 
          data = data_f_reg, Hess=TRUE)

summary(m1)


m1 <- multinom(occupancy ~ from + to + avg_stop_times + facility_sum + temperature + humidity + windspeed + visibility + F_H_com + F_M_com + F_L_com + T_H_com + T_M_com + T_L_com + connections + week + day + hour + min + vehicle_type , data=data_f_regTrain,MaxNWts =10000000)

pred_table1(data_f_regTest, m1, 0 ,0)
sensspec(data_f_reg, m1, 0 ,0)

testProbs2 <- data.frame(Outcome2 = as.factor(subsidyTest$y_numeric),
                        Probs2 = predict(subsidyreg2, newdata = subsidyTest, na.rm = TRUE, type= "response" ))


```

```{r}

# built 
mlt <- multinom(occupancy ~ avg_stop_times + facility_sum , data=data_f_reg,MaxNWts =10000000)

polr <- polr(as.factor(occupancy) ~ avg_stop_times +facility_sum ,
          data = data_f_reg, Hess=TRUE)

mlt
polr
```


## V. Model Evaluation and Validation


```{r function prep, echo=TRUE, message=FALSE, warning=FALSE}
pred_table <- function(data,model,Hplus,Lplus){
    attach(data)
  f_occ <- ordered(occupancy,levels=c("low","medium","high") )
  detach(data)
  
  f_pred <- predict(model,type="probs",newdata = data) %>% 
    as.data.frame() %>% 
    mutate(predClass = case_when(
    low+Lplus>high+Hplus&low+Lplus>medium ~ "low",
    high+Hplus>low+Lplus&high+Hplus>medium ~ "high",
    TRUE ~ "medium"
  ))

mlt.class <- ordered(f_pred$predClass,levels=c("low","medium","high") )
return(table(mlt.class,f_occ))
}

#for calc sensitivity and specificity
pred_table1 <- function(data,model,Hplus,Lplus){
  f_pred <- predict(model,type="probs",newdata = data) %>% 
    as.data.frame() %>% 
    mutate(predClass = case_when(
    low+Lplus>high+Hplus&low+Lplus>medium ~ "low",
    high+Hplus>low+Lplus&high+Hplus>medium ~ "high",
    TRUE ~ "medium"
  ))
return(table(f_pred$predClass,data$occupancy))
}

#distance from ROC_occ point to coin flip line
Distance <- function(Hp,Lp,occ,pred,trn_occ){
  pred <- as.data.frame(pred) %>% 
  mutate(predClass = case_when(
    low+Lp>high+Hp&low+Lp>medium ~ "low",
    high+Hp>low+Lp&high+Hp>medium ~ "high",
    TRUE ~ "medium"
  ))
  #make sure we can get 3*3 table
  pred_occ <- ordered(c(pred[,4],"low","medium","high"),levels=c("low","medium","high") )
  trn_occ <- ordered(trn_occ,levels=c("low","medium","high") )
  true_occ <- c(trn_occ,1,2,3)
  table <- table(pred_occ,true_occ)
  # true_occ_fraction
  TFrc <- table[occ,occ]/sum(table[,occ])
  #flase_occ_fraction
  x <- c(3,1,2,3,1)
  FFrc <- (table[occ,x[occ]]+table[occ,x[occ+2]])/(sum(table[,x[occ]])+sum(table[,x[occ+2]]))
  distance <- abs(TFrc-FFrc)/(2^0.5)
  return(distance)
}

ROC.f <- function(data,model){
    attach(data)
  f_occ <- occupancy
  detach(data)
  
  f_pred <- predict(model,type="probs",newdata = data)
 
    f_ROC <- data.frame(Hplus=rep(0,400),Lplus=rep(0,400),D_H=rep(0,400),D_M=rep(0,400),D_L=rep(0,400),D_T=rep(0,400))
  
  for(i in seq(1:20)){
    for(p in seq(1:20)){
      f_ROC[(i-1)*20+p,1] <- i*0.02-0.2
      f_ROC[(i-1)*20+p,2] <- p*0.02-0.2
      f_ROC[(i-1)*20+p,3] <- Distance(f_ROC[(i-1)*20+p,1],f_ROC[(i-1)*20+p,2],1,f_pred,f_occ)
      f_ROC[(i-1)*20+p,5] <- Distance(f_ROC[(i-1)*20+p,1],f_ROC[(i-1)*20+p,2],2,f_pred,f_occ)
      f_ROC[(i-1)*20+p,4] <- Distance(f_ROC[(i-1)*20+p,1],f_ROC[(i-1)*20+p,2],3,f_pred,f_occ)
    }
  }
  

  for(i in seq(1:20)){
    for(p in seq(1:20)){
      f_ROC[(i-1)*20+p,6] <- f_ROC[(i-1)*20+p,3]+f_ROC[(i-1)*20+p,4]+f_ROC[(i-1)*20+p,5]
    }
  }
  return(f_ROC)
}


### Define pseudo AUC
mean_AUC <- function(data,model){

  f_ROC <- ROC.f(data,model)

  f_auc <- data.frame(Total_auc.mean=c(mean(f_ROC[,6])),High_auc.mean=c(mean(f_ROC[,3])),Med_auc.mean=c(mean(f_ROC[,4])),Low_auc.mean=c(mean(f_ROC[,5])))

  return(f_auc)
}


###  display accuracy, specificity, and sensitivity.
sensspec <- function(data,model,Hplus,Lplus){
  table = pred_table1(data,model,Hplus,Lplus)
  
  accuracy = (table["high", "high"] +table["medium", "medium"] + table["low", "low"])/sum(table)
  
  sens_high = sensitivity(pred_table1(data,model,Hplus,Lplus),"high")
  sens_med = sensitivity(pred_table1(data,model,Hplus,Lplus),"medium")
  sens_low = sensitivity(pred_table1(data,model,Hplus,Lplus),"low")
  
  spec_high = specificity(pred_table1(data,model,Hplus,Lplus),"high")
  spec_med = specificity(pred_table1(data,model,Hplus,Lplus),"medium")
  spec_low = specificity(pred_table1(data,model,Hplus,Lplus),"low")
  
  sens_spec <- list(accuracy, sens_high, sens_med, sens_low, spec_high, spec_med, spec_low)
  return(sens_spec)
}
```

```{r}


pred_table1(data_f_reg,m1,0,0)


```

## VI. Conclusion
