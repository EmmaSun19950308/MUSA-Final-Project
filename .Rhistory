ggplot(data_f %>%
mutate(hour = hour(datetime)) %>%
filter(occupancy == "high" | occupancy == "medium" | occupancy == "low"),
aes(windspeed, color = day))+
geom_freqpoly(binwidth = 1)+
facet_wrap(~occupancy,ncol=3) +
scale_colour_manual(values = palette7,
name = "Week Day") +
labs(title="Train Counts across Windspeed by Occupancy Level",
subtitle = "Belgium, 2016\n",
caption = "Figure 3.2.4",
x="Windspeed",
y="Counts") +
plotTheme()
ggplot(data_f %>%
mutate(hour = hour(datetime)) %>%
filter(occupancy == "high" | occupancy == "medium" | occupancy == "low"),
aes(visibility, color = day))+
geom_freqpoly(binwidth = 1)+
facet_wrap(~occupancy,ncol=3) +
scale_colour_manual(values = palette7,
name = "Week Day") +
labs(title="Train Counts across Visibility by Occupancy Level",
subtitle = "Belgium, 2016\n",
caption = "Figure 3.2.5",
x="Visibility",
y="Counts") +
plotTheme()
ggplot(data_f %>%
mutate(hour = hour(datetime)))+
geom_freqpoly(aes(hour, color = occupancy), binwidth = 1)+
scale_colour_manual(values = palette3) +
labs(title="Train Counts by Occupancy Level (General)",
subtitle = 'Belgium, 2016\n',
caption = "Figure 3.3.1",
x="Hour of the Day",
y="Counts")+
plotTheme()
ggplot(data_f %>% mutate(hour = hour(datetime),
weekend = ifelse(day %in% c("Sun", "Sat"), "Weekend", "Weekday"))) +
geom_freqpoly(aes(hour, color = weekend), binwidth = 1)+
scale_color_manual(values = palette2,
name = 'Period') +
labs(title="Train Counts by Occupancy Level (Week Periods)",
subtitle = 'Belgium, 2016\n',
caption = 'Figure 3.3.2',
x="Hour of the Day",
y="Counts")+
facet_wrap(~occupancy,ncol=3) +
plotTheme()
ggplot(data_f %>% mutate(hour = hour(datetime))) +
geom_freqpoly(aes(hour, color = day), binwidth = 1)+
scale_color_manual(values = palette7,
name = 'Week Day') +
labs(title="Train Counts by Occupancy Level (Week Days)",
subtitle = 'Belgium, 2016\n',
caption = 'Figure 3.3.3',
x="Hour of the Day",
y="Counts")+
facet_wrap(~occupancy,ncol=3) +
plotTheme()
test04 <- data %>%
group_by(vehicle) %>%
summarise(n = n()) %>%
filter(n >= 12)
freq_v = c("IC1518","IC429","IC1515","IC407","P7305","IC1807","IC3631","1828","8015","IC1831","IC539","P7444","S83978", "IC1507","IC716","L557","S23665","IC3432","IC4317","S53586")
p1 <- ggplot() +
geom_sf(data = rail, aes(color = "grey")) +
geom_sf(data=subset(data_f, data_f$vehicle %in% freq_v),aes(colour = vehicle),size=2,show.legend = "point")+
labs(title="Top 20 Busiest Lines",
subtitle = 'Departure Stations\n',
caption = "Figure 3.4")+
mapTheme()+
plotTheme() +
theme(legend.position = "bottom") +
transition_manual(factor(vehicle, levels = freq_v), cumulative = TRUE)
## occupancy by lines: destination
p2 <- ggplot()+
geom_sf(data=rail,aes(color = "grey"))+
geom_sf(data=subset(data_t, data_t$vehicle %in% freq_v),aes(colour = vehicle),size=2,show.legend = "point")+
labs(title="Top 20 Frequent Lines Plotted to Destination\n",
caption = 'Figure')+
mapTheme()+
plotTheme() +
theme(legend.position = "bottom") +
transition_manual(factor(vehicle, levels = freq_v), cumulative = TRUE)
gganimate::animate(p1,  duration=10,renderer = gifski_renderer())
ggplot() +
geom_sf(data = rail, color = "grey") +
geom_sf(data = data_f %>%
filter(country.code == 'be'),
aes(color = occupancy) ,size = 0.5)+
labs(title="Occupancy Level across Departure Stations by Week Days\n",
caption = 'Figure 3.5.1')+
facet_wrap(~day, nrow =2) +
scale_colour_manual(values = palette3,
name = 'Occupancy') +
mapTheme()+
plotTheme()
ggplot() +
geom_sf(data = rail, color = "grey") +
geom_sf(data = data_t %>%
filter(country.code == 'be'),
aes(color = occupancy) ,size = 0.5)+
labs(title="Occupancy Level across Destination Stations by Week Days\n",
caption = 'Figure 3.5.2')+
facet_wrap(~day, nrow =2) +
scale_colour_manual(values = palette3,
name = 'Occupancy') +
mapTheme()+
plotTheme()
ggplot(data_f %>%
mutate(hour = hour(datetime)))+
geom_freqpoly(aes(hour, color = occupancy), binwidth = 1)+
scale_colour_manual(values = palette3) +
labs(title="Train Counts by Occupancy Level (General)",
subtitle = 'Belgium, 2016\n',
caption = "Figure 3.3.1",
x="Hour of the Day",
y="Counts")+
plotTheme()
ggplot(data_f %>% mutate(hour = hour(datetime),
weekend = ifelse(day %in% c("Sun", "Sat"), "Weekend", "Weekday"))) +
geom_freqpoly(aes(hour, color = weekend), binwidth = 1)+
scale_color_manual(values = palette2,
name = 'Period') +
labs(title="Train Counts by Occupancy Level (Week Periods)",
subtitle = 'Belgium, 2016\n',
caption = 'Figure 3.3.2',
x="Hour of the Day",
y="Counts")+
facet_wrap(~occupancy,ncol=3) +
plotTheme()
ggplot(data_f %>% mutate(hour = hour(datetime))) +
geom_freqpoly(aes(hour, color = day), binwidth = 1)+
scale_color_manual(values = palette7,
name = 'Week Day') +
labs(title="Train Counts by Occupancy Level (Week Days)",
subtitle = 'Belgium, 2016\n',
caption = 'Figure 3.3.3',
x="Hour of the Day",
y="Counts")+
facet_wrap(~occupancy,ncol=3) +
plotTheme()
test04 <- data %>%
group_by(vehicle) %>%
summarise(n = n()) %>%
filter(n >= 12)
freq_v = c("IC1518","IC429","IC1515","IC407","P7305","IC1807","IC3631","1828","8015","IC1831","IC539","P7444","S83978", "IC1507","IC716","L557","S23665","IC3432","IC4317","S53586")
p1 <- ggplot() +
geom_sf(data = rail, aes(color = "grey")) +
geom_sf(data=subset(data_f, data_f$vehicle %in% freq_v),aes(colour = vehicle),size=2,show.legend = "point")+
labs(title="Top 20 Busiest Lines",
subtitle = 'Departure Stations\n',
caption = "Figure 3.4")+
mapTheme()+
plotTheme() +
theme(legend.position = "bottom") +
transition_manual(factor(vehicle, levels = freq_v), cumulative = TRUE)
## occupancy by lines: destination
p2 <- ggplot()+
geom_sf(data=rail,aes(color = "grey"))+
geom_sf(data=subset(data_t, data_t$vehicle %in% freq_v),aes(colour = vehicle),size=2,show.legend = "point")+
labs(title="Top 20 Frequent Lines Plotted to Destination\n",
caption = 'Figure')+
mapTheme()+
plotTheme() +
theme(legend.position = "bottom") +
transition_manual(factor(vehicle, levels = freq_v), cumulative = TRUE)
gganimate::animate(p1,  duration=10,renderer = gifski_renderer())
# Create regression dataset
data_f <- data_f %>%
rowid_to_column(var = "rowIndex")
data_f_reg <- data_f %>%
mutate(hour = hour(interval60),
min = hour(interval15)) %>%
dplyr::select(-name,-date,-time,-connection,-from.X,-from.Y,-to.X,-to.Y,-datetime,-X,-lat,-lng,-date_time,-interval60,-interval15) %>%
filter(country.code == 'be') %>%
st_drop_geometry() %>%
na.omit()
data_f_reg$high_occ <- ifelse(data_f_reg$occupancy == "high", "Yes","No")
data_f_reg$high_occ_num <- ifelse(data_f_reg$occupancy == "high", 1,0)
# table(data_f_reg$high_occ)
set.seed(3456)
trainIndex <- createDataPartition(data_f_reg$occupancy, p = .65,
list = FALSE,
times = 1)
data_f_regTrain <- data_f_reg[ trainIndex,]
data_f_regTest  <- data_f_reg[-trainIndex,]
# m0 <- multinom(occupancy ~ from + to + avg_stop_times + facility_sum + temperature + humidity + windspeed + visibility + F_H_com + F_M_com + F_L_com + T_H_com + T_M_com + T_L_com + connections + week + day + hour + min + time_of_day + vehicle_type , data = na.omit(data_f_reg),MaxNWts =10000000)
# m1 <- multinom(occupancy ~ from + to + avg_stop_times + facility_sum + temperature + humidity + windspeed + visibility + F_H_com + F_M_com + F_L_com + T_H_com + T_M_com + T_L_com + connections + week + day + hour + min + vehicle_type + lagHour + lag2Hours + lag3Hours + lag4Hours + lag12Hours + time_of_day,  data = na.omit(data_f_reg),MaxNWts =10000000)
m0 <- glm(high_occ_num ~ from + to + avg_stop_times + facility_sum + temperature + humidity + windspeed + visibility + F_H_com + F_M_com + F_L_com + T_H_com + T_M_com + T_L_com + connections + week + day + hour + min + vehicle_type + time_of_day + stationsdist + distance,
data = data_f_reg,
family="binomial" (link="logit"))
m1 <- glm(high_occ_num ~ from + to + avg_stop_times + facility_sum + temperature + humidity + windspeed + visibility + F_H_com + F_M_com + F_L_com + T_H_com + T_M_com + T_L_com + connections + week + day + hour + min + vehicle_type + lagHour + lag2Hours + lag3Hours + lag4Hours + lag12Hours + time_of_day + stationsdist + distance,
data = data_f_reg,
family="binomial" (link="logit"))
stargazer(m0, m1, type = "html",
title = "Table 1. Summary Statistics of Model 1 and Model 2",
header = FALSE,
single.row = TRUE,
column.labels=c("Model 1","Model 2"))
testProbs0 <- data.frame(Outcome0 = as.factor(data_f_reg$high_occ_num),
Probs0 = predict(m0, newdata = data_f_reg, na.rm = TRUE, type= "response" ))
testProbs1 <- data.frame(Outcome1 = as.factor(data_f_reg$high_occ_num),
Probs1 = predict(m1, newdata = data_f_reg, na.rm = TRUE, type= "response" ))
# View(testProbs1)
grid.arrange(
ggplot(testProbs0, aes(x = Probs0, fill = as.factor(Outcome0))) +
geom_density() +
facet_grid(Outcome0 ~ .) +
scale_fill_manual(values = palette2,
name = "Predicated High Occupancy",
labels = c("Low/Medium", "High")) +
labs(x = "Occupancy", y = "Density of probabilities",
title = "Distribution of predicted probabilities by observed outcome - Model 1\n") +
theme(strip.text.x = element_text(size = 18),
legend.position = "bottom") +
plotTheme(),
ggplot(testProbs1, aes(x = Probs1, fill = as.factor(Outcome1))) +
geom_density() +
facet_grid(Outcome1 ~ .) +
scale_fill_manual(values = palette2,
name = "Predicated High Occupancy",
labels = c("Low/Medium", "High")) +
labs(x = "Occupancy", y = "Density of probabilities",
title = "Distribution of predicted probabilities by observed outcome - Model 2\n",
caption = 'Figure 4') +
theme(strip.text.x = element_text(size = 18),
legend.position = "bottom") +
plotTheme())
testProbs1 <-
testProbs1 %>%
mutate(predOutcome1  = as.factor(ifelse(testProbs1$Probs1 > 0.5 , 1, 0)))
caret::confusionMatrix(testProbs1$predOutcome1, testProbs1$Outcome1,
positive = "1")
conf.matrix.table1 <-
testProbs1 %>%
count(predOutcome1, Outcome1) %>%
summarize(True_Negative = sum(n[predOutcome1==0 & Outcome1==0]),
True_Positive = sum(n[predOutcome1==1 & Outcome1==1]),
False_Negative = sum(n[predOutcome1==0 & Outcome1==1]),
False_Positive = sum(n[predOutcome1==1 & Outcome1==0])) %>%
gather(Variable, Count) %>%
bind_cols(data.frame(Description = c(
"Predicted correctly the occupancy of train is not high",
"Predicted correctly the occupancy of train is high",
"Predicted incorrectly the occupancy of train is not high",
"Predicted incorrectly the occupancy of train is high")))
kable(conf.matrix.table1) %>%
kable_styling(font_size = 12, full_width = F,
bootstrap_options = c("striped", "hover", "condensed")) %>%
footnote(general = "Table 2. Confusion Matrix Table\n",
general_title= '\n')
AA <- data_f_reg %>%
mutate(Probs = predict(m1, newdata = data_f_reg, na.rm = TRUE, type= "response" ),
Pred  = as.factor(ifelse(Probs > 0.5 , 1, 0))) %>%
dplyr::select(rowIndex, high_occ,high_occ_num, Pred)
new_data <- merge(x = AA, y = data_f, by.x = "rowIndex") %>%
mutate(CM = case_when(
new_data$Pred == 0 & new_data$high_occ_num == 0 ~ 'TN',
Pred == 0 & high_occ_num == 1 ~ 'FN',
Pred == 1 & high_occ_num == 0 ~ 'FP',
Pred == 1 & high_occ_num == 1 ~ 'TP'),
Error = ifelse(Pred == high_occ_num, "Error", "No Error"))
knitr::opts_chunk$set(echo = TRUE)
new_data <- merge(x = AA, y = data_f, by.x = "rowIndex") %>%
mutate(CM = case_when(
Pred == 0 & high_occ_num == 0 ~ 'TN',
Pred == 0 & high_occ_num == 1 ~ 'FN',
Pred == 1 & high_occ_num == 0 ~ 'FP',
Pred == 1 & high_occ_num == 1 ~ 'TP'),
Error = ifelse(Pred == high_occ_num, "Error", "No Error"))
AA <- data_f_reg %>%
mutate(Probs = predict(m1, newdata = data_f_reg, na.rm = TRUE, type= "response" ),
Pred  = as.factor(ifelse(Probs > 0.5 , 1, 0))) %>%
dplyr::select(rowIndex, high_occ,high_occ_num, Pred)
new_data <- merge(x = AA, y = data_f, by.x = "rowIndex") %>%
mutate(CM = case_when(
Pred == 0 & high_occ_num == 0 ~ 'TN',
Pred == 0 & high_occ_num == 1 ~ 'FN',
Pred == 1 & high_occ_num == 0 ~ 'FP',
Pred == 1 & high_occ_num == 1 ~ 'TP'),
Error = ifelse(Pred == high_occ_num, "Error", "No Error"))
AA <- data_f_reg %>%
mutate(Probs = predict(m1, newdata = data_f_reg, na.rm = TRUE, type= "response" ),
Pred  = as.factor(ifelse(Probs > 0.5 , 1, 0))) %>%
dplyr::select(rowIndex, high_occ,high_occ_num, Pred)
new_data <- merge(x = AA, y = data_f, by.x = "rowIndex") %>%
mutate(CM = case_when(
Pred == 0 & high_occ_num == 0 ~ 'TN',
Pred == 0 & high_occ_num == 1 ~ 'FN',
Pred == 1 & high_occ_num == 0 ~ 'FP',
Pred == 1 & high_occ_num == 1 ~ 'TP'),
Error = ifelse(Pred == high_occ_num, "Error", "No Error"))
# table(new_data$CM)
# View(new_data)
conf.matrix.station <- new_data %>%
group_by(name, CM) %>%
summarize(count = n())
conf.matrix.station.sf <- merge(x = conf.matrix.station, y = stations, by = "name" , all.x = TRUE)  %>%
st_sf()
error.station <- new_data %>%
group_by(name,Error) %>%
summarise(count = n())
# View(error.station)
error.station.sf <- merge(x = error.station, y = stations, by = "name" , all.x = TRUE)  %>%
st_sf()
ggplot() +
geom_sf(data = rail, color = "grey") +
geom_sf(data = conf.matrix.station.sf %>%
filter(country.code == 'be'),
aes(color = count), size = 1) +
labs(title="Confustion Matrix across Stations",
subtitle = ' ',
caption = 'Figure 5.3.1')+
scale_colour_viridis(direction = -1,
discrete = FALSE, option = "plasma",
name = 'Counts')+
facet_wrap(~CM) +
mapTheme()+
plotTheme()
ggplot() +
geom_sf(data = rail, color = "grey") +
geom_sf(data = error.station.sf %>%
filter(country.code == 'be'),
aes(color = count), size = 1) +
labs(title="Prediction Error across Stations",
subtitle = ' ',
caption = 'Figure 5.3.2')+
scale_colour_viridis(direction = -1,
discrete = FALSE, option = "plasma",
name = 'Counts')+
facet_wrap(~Error) +
mapTheme()+
plotTheme()
knitr::opts_chunk$set(echo = TRUE)
ggplot() +
geom_sf(data = rail, color = "grey") +
geom_sf(data = error.station.sf %>%
filter(country.code == 'be'),
aes(color = count), size = 1) +
labs(title="Prediction Error across Stations",
subtitle = ' ',
caption = 'Figure 5.3.2')+
scale_colour_viridis(direction = -1,
discrete = FALSE, option = "plasma",
name = 'Counts')+
facet_wrap(~Error) +
mapTheme()+
plotTheme()
knitr::opts_chunk$set(echo = TRUE)
iterateThresholds <- function(data) {
x = 0.01
all_prediction <- data.frame()
while (x <= 1) {
this_prediction <-
testProbs1 %>%
mutate(predOutcome_new = ifelse(Probs1 > 0.5, 1, 0)) %>%
count(predOutcome_new, Outcome1) %>%
summarize(True_Negative = sum(n[predOutcome_new==0 & Outcome1==1]),
True_Positive = sum(n[predOutcome_new==1 & Outcome1==2]),
False_Negative = sum(n[predOutcome_new==0 & Outcome1==2]),
False_Positive = sum(n[predOutcome_new==1 & Outcome1==1])) %>%
gather(Variable, Count) %>%
mutate(Threshold = x)
all_prediction <- rbind(all_prediction, this_prediction)
x <- x + .01
}
return(all_prediction)
}
whichThreshold_subsidy <- iterateThresholds(testProbs1)
# View(whichThreshold_subsidy)
whichThreshold_subsidy  %>%
ggplot(.,aes(Threshold, Count, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palette4) +
labs(title = "Counts by confusion matrix type and threshold\n",
y = "Count",
caption = 'Figure 5.4') +
plotTheme() +
guides(colour=guide_legend(title = "Confusion Matrix"))
whichThreshold_subsidy_new <-
whichThreshold_subsidy %>%
group_by(Threshold) %>%
summarise(Total_Count = sum(Count))
View(whichThreshold_subsidy_new)
whichThreshold_subsidy_new %>%
ggplot(aes(Threshold, Total_Count)) +
geom_point(color =  "#658feb") +
geom_vline(xintercept = dplyr::pull(arrange(whichThreshold_subsidy_new, -Total_Count)[1,1])) +
ylab('Total Counts')  +
labs(title = "Total Count of Credits by Threshold\n",
caption = 'Figure 6.3')  +
plotTheme()
knitr::opts_chunk$set(echo = TRUE)
iterateThresholds <- function(data) {
x = 0.01
all_prediction <- data.frame()
while (x <= 1) {
this_prediction <-
testProbs1 %>%
mutate(predOutcome_new = ifelse(Probs1 > 0.5, 1, 0)) %>%
count(predOutcome_new, Outcome1) %>%
summarize(True_Negative = sum(n[predOutcome_new==0 & Outcome1==1]),
True_Positive = sum(n[predOutcome_new==1 & Outcome1==2]),
False_Negative = sum(n[predOutcome_new==0 & Outcome1==2]),
False_Positive = sum(n[predOutcome_new==1 & Outcome1==1])) %>%
gather(Variable, Count) %>%
mutate(Threshold = x)
all_prediction <- rbind(all_prediction, this_prediction)
x <- x + .01
}
return(all_prediction)
}
whichThreshold_subsidy <- iterateThresholds(testProbs1)
# View(whichThreshold_subsidy)
whichThreshold_subsidy  %>%
ggplot(.,aes(Threshold, Count, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palette4) +
labs(title = "Counts by confusion matrix type and threshold\n",
y = "Count",
caption = 'Figure 5.4') +
plotTheme() +
guides(colour=guide_legend(title = "Confusion Matrix"))
whichThreshold_subsidy_new <-
whichThreshold_subsidy %>%
group_by(Threshold) %>%
summarise(Total_Count = sum(Count))
# View(whichThreshold_subsidy_new)
whichThreshold_subsidy_new %>%
ggplot(aes(Threshold, Total_Count)) +
geom_point(color =  "#658feb") +
geom_vline(xintercept = dplyr::pull(arrange(whichThreshold_subsidy_new, -Total_Count)[1,1])) +
ylab('Total Counts')  +
labs(title = "Total Count of Credits by Threshold\n",
caption = 'Figure 6.3')  +
plotTheme()
knitr::opts_chunk$set(echo = TRUE)
ggplot() +
geom_sf(data = rail, color = "grey") +
geom_sf(data = data_f %>%
filter(country.code == 'be'),
aes(color = stationsdist) ,size = 0.5)+
labs(title="Station Density by Occupancy Level",
subtitle = 'Distance of each station to the nearest three stations\n',
caption = 'Figure 3.1.1')+
scale_colour_viridis(direction = -1,
discrete = FALSE, option = "plasma",
name = 'Counts')+
facet_wrap(~occupancy, ncol = 3) +
mapTheme()+
plotTheme()  +
theme(legend.position = "bottom")
knitr::opts_chunk$set(echo = TRUE)
ggplot() +
geom_sf(data = rail, color = "grey") +
geom_sf(data = data_f %>%
filter(country.code == 'be'),
aes(color = majc_nn5) ,size = 0.5)+
labs(title="Distance of Stations to Major Cities",
subtitle = ' ',
caption = 'Figure 3.1.2')+
scale_colour_viridis(direction = -1,
discrete = FALSE, option = "plasma",
name = 'Counts')+
facet_wrap(~occupancy, ncol = 3) +
mapTheme()+
plotTheme()  +
theme(legend.position = "bottom")
test04 <- data %>%
group_by(vehicle) %>%
summarise(n = n()) %>%
filter(n >= 12)
freq_v = c("IC1518","IC429","IC1515","IC407","P7305","IC1807","IC3631","1828","8015","IC1831","IC539","P7444","S83978", "IC1507","IC716","L557","S23665","IC3432","IC4317","S53586")
p1 <- ggplot() +
geom_sf(data = rail, aes(color = "grey")) +
geom_sf(data=subset(data_f, data_f$vehicle %in% freq_v),aes(colour = vehicle),size=2,show.legend = "point")+
labs(title="Top 20 Busiest Lines",
subtitle = 'Departure Stations\n',
caption = "Figure 3.4")+
mapTheme()+
plotTheme() +
theme(legend.position = "bottom") +
transition_manual(factor(vehicle, levels = freq_v), cumulative = TRUE)
## occupancy by lines: destination
p2 <- ggplot()+
geom_sf(data=rail,aes(color = "grey"))+
geom_sf(data=subset(data_t, data_t$vehicle %in% freq_v),aes(colour = vehicle),size=2,show.legend = "point")+
labs(title="Top 20 Frequent Lines Plotted to Destination\n",
caption = 'Figure')+
mapTheme()+
plotTheme() +
theme(legend.position = "bottom") +
transition_manual(factor(vehicle, levels = freq_v), cumulative = TRUE)
gganimate::animate(p1,  duration=10,renderer = gifski_renderer())
knitr::opts_chunk$set(echo = TRUE)
ggplot() +
geom_sf(data = rail, color = "grey") +
geom_sf(data = conf.matrix.station.sf %>%
filter(country.code == 'be'),
aes(color = count), size = 1) +
labs(title="Confustion Matrix across Stations",
subtitle = ' ',
caption = 'Figure 5.3.1')+
scale_colour_viridis(direction = -1,
discrete = FALSE, option = "plasma",
name = 'Counts')+
facet_wrap(~CM) +
mapTheme()+
plotTheme()
